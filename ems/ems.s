;
; File generated by cc65 v 2.19 - Git b993d8833
;
	.fopt		compiler,"cc65 v 2.19 - Git b993d8833"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_sfx_play
	.import		_pad_poll
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_get_pad_new
	.import		_get_cpu_status
	.export		_pad1
	.export		_pad1Next
	.export		_accumulator
	.export		_x
	.export		_p
	.export		_p_temp
	.export		_mouse_speed
	.export		_cycles1
	.export		_cycles2
	.export		_temp
	.export		_flags
	.export		_albert_palette
	.export		_palSprites
	.export		_palette
	.export		_i
	.export		_j
	.export		_spr
	.export		_menuIndexH
	.export		_menuIndexV
	.export		_page
	.export		_cursorX
	.export		_cursorY
	.export		_cpu_status
	.export		_can_jump
	.export		_mario_vel_y
	.export		_mario_pos_y
	.export		_eval_pos
	.export		_put_str
	.export		_draw_cursor_data
	.export		_draw_accumulator
	.export		_draw_cpu_status
	.export		_draw_albert
	.export		_draw_mario
	.export		_update_mario
	.export		_draw_cycles
	.export		_benchmark
	.export		_handleMenuInput
	.export		_hover
	.export		_main

.segment	"DATA"

_pad1:
	.byte	$00
_pad1Next:
	.byte	$00
_accumulator:
	.word	$0000
_x:
	.byte	$00
_p:
	.byte	$00
_p_temp:
	.byte	$00
_mouse_speed:
	.byte	$02
_cycles1:
	.word	$0000
_cycles2:
	.word	$0000
_temp:
	.byte	$00
_albert_palette:
	.byte	$00
_j:
	.byte	$00
_spr:
	.byte	$00
_menuIndexH:
	.byte	$00
_menuIndexV:
	.byte	$00
_page:
	.byte	$00
_cursorX:
	.byte	$80
_cursorY:
	.byte	$78
_cpu_status:
	.byte	$00
_can_jump:
	.byte	$00
_mario_vel_y:
	.byte	$00
_mario_pos_y:
	.byte	$78

.segment	"RODATA"

_flags:
	.byte	$4E
	.byte	$56
	.byte	$31
	.byte	$42
	.byte	$44
	.byte	$49
	.byte	$5A
	.byte	$43
_palSprites:
	.byte	$0F
	.byte	$09
	.byte	$26
	.byte	$11
	.byte	$0F
	.byte	$27
	.byte	$18
	.byte	$05
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$19
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$38
_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
S002F:
	.byte	$4D,$75,$73,$65,$75,$6D,$20,$45,$6D,$75,$6C,$61,$74,$69,$6F,$6E
	.byte	$20,$53,$79,$73,$74,$65,$6D,$73,$00
S003B:
	.byte	$41,$44,$43,$2F,$53,$42,$2F,$53,$48,$46,$3A,$20,$20,$20,$20,$43
	.byte	$79,$63,$6C,$65,$73,$00
S003C:
	.byte	$4F,$52,$2F,$41,$4E,$44,$2F,$58,$4F,$52,$3A,$20,$20,$20,$20,$43
	.byte	$79,$63,$6C,$65,$73,$00
S003A:
	.byte	$42,$65,$6E,$63,$68,$6D,$61,$72,$6B,$20,$31,$30,$30,$20,$49,$3A
	.byte	$20,$28,$42,$29,$00
S0031:
	.byte	$41,$75,$74,$68,$6F,$72,$3A,$20,$42,$65,$74,$6F,$20,$50,$65,$72
	.byte	$65,$7A,$00
S0035:
	.byte	$58,$3A,$20,$30,$20,$31,$20,$32,$20,$33,$20,$34,$00
S0036:
	.byte	$20,$20,$20,$35,$20,$36,$20,$37,$20,$38,$20,$39,$00
S0038:
	.byte	$20,$20,$20,$20,$20,$20,$20,$2A,$20,$2F,$20,$43,$00
S0030:
	.byte	$56,$69,$64,$65,$6F,$20,$6D,$6F,$64,$65,$3A,$00
S0037:
	.byte	$41,$20,$20,$20,$58,$3A,$20,$2B,$20,$2D,$00
S003D:
	.byte	$50,$4F,$53,$20,$58,$3A,$20,$00
S003E:
	.byte	$50,$4F,$53,$20,$59,$3A,$20,$00
S0032:
	.byte	$4E,$54,$53,$43,$00
S0034:
	.byte	$41,$3A,$20,$00
S0033:
	.byte	$50,$41,$4C,$00
S0039:
	.byte	$50,$3A,$20,$00

.segment	"BSS"

_i:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ eval_pos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eval_pos: near

.segment	"CODE"

;
; if((cursorX > 30 && cursorX < 101) && (cursorY > 134 && cursorY < 150)){
;
	ldx     #$00
	lda     _cursorX
	cmp     #$1F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0003
	ldx     #$00
	lda     _cursorX
	cmp     #$65
	jsr     boolult
	jne     L0004
L0003:	ldx     #$00
	lda     #$00
	jeq     L0005
L0004:	ldx     #$00
	lda     #$01
L0005:	jeq     L0006
	ldx     #$00
	lda     _cursorY
	cmp     #$87
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0007
	ldx     #$00
	lda     _cursorY
	cmp     #$96
	jsr     boolult
	jne     L0008
L0007:	ldx     #$00
	lda     #$00
	jeq     L0009
L0008:	ldx     #$00
	lda     #$01
L0009:	jne     L000A
L0006:	ldx     #$00
	lda     #$00
	jeq     L000B
L000A:	ldx     #$00
	lda     #$01
L000B:	jeq     L0021
;
; if(cursorY < 143){
;
	ldx     #$00
	lda     _cursorY
	cmp     #$8F
	jsr     boolult
	jeq     L000C
;
; if(cursorX > 30 && cursorX < 38) return (unsigned char)0;
;
	ldx     #$00
	lda     _cursorX
	cmp     #$1F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L000E
	ldx     #$00
	lda     _cursorX
	cmp     #$26
	jsr     boolult
	jne     L000F
L000E:	ldx     #$00
	lda     #$00
	jeq     L0010
L000F:	ldx     #$00
	lda     #$01
L0010:	jeq     L000D
	ldx     #$00
	lda     #$00
	jmp     L006A
;
; if(cursorX > 46 && cursorX < 54) return (unsigned char)1;
;
L000D:	ldx     #$00
	lda     _cursorX
	cmp     #$2F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0012
	ldx     #$00
	lda     _cursorX
	cmp     #$36
	jsr     boolult
	jne     L0013
L0012:	ldx     #$00
	lda     #$00
	jeq     L0014
L0013:	ldx     #$00
	lda     #$01
L0014:	jeq     L0011
	ldx     #$00
	lda     #$01
	jmp     L006A
;
; if(cursorX > 62 && cursorX < 70) return (unsigned char)2;
;
L0011:	ldx     #$00
	lda     _cursorX
	cmp     #$3F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0016
	ldx     #$00
	lda     _cursorX
	cmp     #$46
	jsr     boolult
	jne     L0017
L0016:	ldx     #$00
	lda     #$00
	jeq     L0018
L0017:	ldx     #$00
	lda     #$01
L0018:	jeq     L0015
	ldx     #$00
	lda     #$02
	jmp     L006A
;
; if(cursorX > 78 && cursorX < 86) return (unsigned char)3;
;
L0015:	ldx     #$00
	lda     _cursorX
	cmp     #$4F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L001A
	ldx     #$00
	lda     _cursorX
	cmp     #$56
	jsr     boolult
	jne     L001B
L001A:	ldx     #$00
	lda     #$00
	jeq     L001C
L001B:	ldx     #$00
	lda     #$01
L001C:	jeq     L0019
	ldx     #$00
	lda     #$03
	jmp     L006A
;
; if(cursorX > 94 && cursorX < 102) return (unsigned char)4;
;
L0019:	ldx     #$00
	lda     _cursorX
	cmp     #$5F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L001E
	ldx     #$00
	lda     _cursorX
	cmp     #$66
	jsr     boolult
	jne     L001F
L001E:	ldx     #$00
	lda     #$00
	jeq     L0020
L001F:	ldx     #$00
	lda     #$01
L0020:	jeq     L001D
	ldx     #$00
	lda     #$04
	jmp     L006A
;
; return 255;
;
L001D:	ldx     #$00
	lda     #$FF
	jmp     L006A
;
; else{
;
	jmp     L0021
;
; if(cursorX > 30 && cursorX < 38) return (unsigned char)5;
;
L000C:	ldx     #$00
	lda     _cursorX
	cmp     #$1F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0023
	ldx     #$00
	lda     _cursorX
	cmp     #$26
	jsr     boolult
	jne     L0024
L0023:	ldx     #$00
	lda     #$00
	jeq     L0025
L0024:	ldx     #$00
	lda     #$01
L0025:	jeq     L0022
	ldx     #$00
	lda     #$05
	jmp     L006A
;
; if(cursorX > 46 && cursorX < 54) return (unsigned char)6;
;
L0022:	ldx     #$00
	lda     _cursorX
	cmp     #$2F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0027
	ldx     #$00
	lda     _cursorX
	cmp     #$36
	jsr     boolult
	jne     L0028
L0027:	ldx     #$00
	lda     #$00
	jeq     L0029
L0028:	ldx     #$00
	lda     #$01
L0029:	jeq     L0026
	ldx     #$00
	lda     #$06
	jmp     L006A
;
; if(cursorX > 62 && cursorX < 70) return (unsigned char)7;
;
L0026:	ldx     #$00
	lda     _cursorX
	cmp     #$3F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L002B
	ldx     #$00
	lda     _cursorX
	cmp     #$46
	jsr     boolult
	jne     L002C
L002B:	ldx     #$00
	lda     #$00
	jeq     L002D
L002C:	ldx     #$00
	lda     #$01
L002D:	jeq     L002A
	ldx     #$00
	lda     #$07
	jmp     L006A
;
; if(cursorX > 78 && cursorX < 86) return (unsigned char)8;
;
L002A:	ldx     #$00
	lda     _cursorX
	cmp     #$4F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L002F
	ldx     #$00
	lda     _cursorX
	cmp     #$56
	jsr     boolult
	jne     L0030
L002F:	ldx     #$00
	lda     #$00
	jeq     L0031
L0030:	ldx     #$00
	lda     #$01
L0031:	jeq     L002E
	ldx     #$00
	lda     #$08
	jmp     L006A
;
; if(cursorX > 94 && cursorX < 102) return (unsigned char)9;
;
L002E:	ldx     #$00
	lda     _cursorX
	cmp     #$5F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0033
	ldx     #$00
	lda     _cursorX
	cmp     #$66
	jsr     boolult
	jne     L0034
L0033:	ldx     #$00
	lda     #$00
	jeq     L0035
L0034:	ldx     #$00
	lda     #$01
L0035:	jeq     L0032
	ldx     #$00
	lda     #$09
	jmp     L006A
;
; return 255;
;
L0032:	ldx     #$00
	lda     #$FF
	jmp     L006A
;
; if((cursorX > 63 && cursorX < 102) && (cursorY > 158 && cursorY < 174)){
;
L0021:	ldx     #$00
	lda     _cursorX
	cmp     #$40
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0037
	ldx     #$00
	lda     _cursorX
	cmp     #$66
	jsr     boolult
	jne     L0038
L0037:	ldx     #$00
	lda     #$00
	jeq     L0039
L0038:	ldx     #$00
	lda     #$01
L0039:	jeq     L003A
	ldx     #$00
	lda     _cursorY
	cmp     #$9F
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L003B
	ldx     #$00
	lda     _cursorY
	cmp     #$AE
	jsr     boolult
	jne     L003C
L003B:	ldx     #$00
	lda     #$00
	jeq     L003D
L003C:	ldx     #$00
	lda     #$01
L003D:	jne     L003E
L003A:	ldx     #$00
	lda     #$00
	jeq     L003F
L003E:	ldx     #$00
	lda     #$01
L003F:	jeq     L0049
;
; if(cursorY < 166){
;
	ldx     #$00
	lda     _cursorY
	cmp     #$A6
	jsr     boolult
	jeq     L0040
;
; if(cursorX > 63 && cursorX < 70) return (unsigned char) 0x0B;
;
	ldx     #$00
	lda     _cursorX
	cmp     #$40
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0042
	ldx     #$00
	lda     _cursorX
	cmp     #$46
	jsr     boolult
	jne     L0043
L0042:	ldx     #$00
	lda     #$00
	jeq     L0044
L0043:	ldx     #$00
	lda     #$01
L0044:	jeq     L0041
	ldx     #$00
	lda     #$0B
	jmp     L006A
;
; if(cursorX > 79 && cursorX < 87) return (unsigned char) 0x0D;
;
L0041:	ldx     #$00
	lda     _cursorX
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0046
	ldx     #$00
	lda     _cursorX
	cmp     #$57
	jsr     boolult
	jne     L0047
L0046:	ldx     #$00
	lda     #$00
	jeq     L0048
L0047:	ldx     #$00
	lda     #$01
L0048:	jeq     L0045
	ldx     #$00
	lda     #$0D
	jmp     L006A
;
; return 255;
;
L0045:	ldx     #$00
	lda     #$FF
	jmp     L006A
;
; else{
;
	jmp     L0049
;
; if(cursorX > 63 && cursorX < 70) return 0x0A;
;
L0040:	ldx     #$00
	lda     _cursorX
	cmp     #$40
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L004B
	ldx     #$00
	lda     _cursorX
	cmp     #$46
	jsr     boolult
	jne     L004C
L004B:	ldx     #$00
	lda     #$00
	jeq     L004D
L004C:	ldx     #$00
	lda     #$01
L004D:	jeq     L004A
	ldx     #$00
	lda     #$0A
	jmp     L006A
;
; if(cursorX > 79 && cursorX < 87) return 0x0F;
;
L004A:	ldx     #$00
	lda     _cursorX
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L004F
	ldx     #$00
	lda     _cursorX
	cmp     #$57
	jsr     boolult
	jne     L0050
L004F:	ldx     #$00
	lda     #$00
	jeq     L0051
L0050:	ldx     #$00
	lda     #$01
L0051:	jeq     L004E
	ldx     #$00
	lda     #$0F
	jmp     L006A
;
; if(cursorX > 95 && cursorX < 104) return 'C';
;
L004E:	ldx     #$00
	lda     _cursorX
	cmp     #$60
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0053
	ldx     #$00
	lda     _cursorX
	cmp     #$68
	jsr     boolult
	jne     L0054
L0053:	ldx     #$00
	lda     #$00
	jeq     L0055
L0054:	ldx     #$00
	lda     #$01
L0055:	jeq     L0052
	ldx     #$00
	lda     #$43
	jmp     L006A
;
; return 255;
;
L0052:	ldx     #$00
	lda     #$FF
	jmp     L006A
;
; if((cursorX > 207 && cursorX < 255) && (cursorY > 15 && cursorY < 73)) return 32;
;
L0049:	ldx     #$00
	lda     _cursorX
	cmp     #$D0
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0057
	ldx     #$00
	lda     _cursorX
	cmp     #$FF
	jsr     boolult
	jne     L0058
L0057:	ldx     #$00
	lda     #$00
	jeq     L0059
L0058:	ldx     #$00
	lda     #$01
L0059:	jeq     L005A
	ldx     #$00
	lda     _cursorY
	cmp     #$10
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L005B
	ldx     #$00
	lda     _cursorY
	cmp     #$49
	jsr     boolult
	jne     L005C
L005B:	ldx     #$00
	lda     #$00
	jeq     L005D
L005C:	ldx     #$00
	lda     #$01
L005D:	jne     L005E
L005A:	ldx     #$00
	lda     #$00
	jeq     L005F
L005E:	ldx     #$00
	lda     #$01
L005F:	jeq     L0056
	ldx     #$00
	lda     #$20
	jmp     L006A
;
; if((cursorX > 141 && cursorX < 155) && (cursorY > 119 && cursorY < 136)) return 33;
;
L0056:	ldx     #$00
	lda     _cursorX
	cmp     #$8E
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0061
	ldx     #$00
	lda     _cursorX
	cmp     #$9B
	jsr     boolult
	jne     L0062
L0061:	ldx     #$00
	lda     #$00
	jeq     L0063
L0062:	ldx     #$00
	lda     #$01
L0063:	jeq     L0064
	ldx     #$00
	lda     _cursorY
	cmp     #$78
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0065
	ldx     #$00
	lda     _cursorY
	cmp     #$88
	jsr     boolult
	jne     L0066
L0065:	ldx     #$00
	lda     #$00
	jeq     L0067
L0066:	ldx     #$00
	lda     #$01
L0067:	jne     L0068
L0064:	ldx     #$00
	lda     #$00
	jeq     L0069
L0068:	ldx     #$00
	lda     #$01
L0069:	jeq     L0060
	ldx     #$00
	lda     #$21
	jmp     L006A
;
; else return (unsigned char)255;
;
	jmp     L006A
L0060:	ldx     #$00
	lda     #$FF
	jmp     L006A
;
; }
;
L006A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int adr, const char *str)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; void put_str(unsigned int adr, const char* str){
;
	jsr     pushax
;
; vram_adr(adr);
;
	ldy     #$03
	jsr     ldaxysp
	jsr     _vram_adr
;
; while(1){
;
	jmp     L0004
;
; if(!*str)break;
;
L0002:	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     bnega
	jeq     L0005
	jmp     L0003
;
; vram_put((*str++));
;
L0005:	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	pha
	ldy     #$00
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	pla
	jsr     _vram_put
;
; while(1){
;
L0004:	jmp     L0002
;
; }
;
L0003:	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cursor_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cursor_data: near

.segment	"CODE"

;
; oam_spr(80, 215,((cursorX % 10) + 0x30), 0x0);
;
	ldx     #$00
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     #$D7
	jsr     pusha
	ldx     #$00
	lda     _cursorX
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; oam_spr(72, 215, (((cursorX / 10) % 10) + 0x30), 0x0);
;
	ldx     #$00
	lda     #$48
	jsr     pusha
	ldx     #$00
	lda     #$D7
	jsr     pusha
	ldx     #$00
	lda     _cursorX
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; oam_spr(64, 215, (((cursorX / 100) % 10) + 0x30), 0x0);
;
	ldx     #$00
	lda     #$40
	jsr     pusha
	ldx     #$00
	lda     #$D7
	jsr     pusha
	ldx     #$00
	lda     _cursorX
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; oam_spr(80, 223,((cursorY % 10) + 0x30), 0x0);
;
	ldx     #$00
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     #$DF
	jsr     pusha
	ldx     #$00
	lda     _cursorY
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; oam_spr(72, 223, (((cursorY / 10) % 10) + 0x30), 0x0);
;
	ldx     #$00
	lda     #$48
	jsr     pusha
	ldx     #$00
	lda     #$DF
	jsr     pusha
	ldx     #$00
	lda     _cursorY
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; oam_spr(64, 223, (((cursorY / 100) % 10) + 0x30), 0x0);
;
	ldx     #$00
	lda     #$40
	jsr     pusha
	ldx     #$00
	lda     #$DF
	jsr     pusha
	ldx     #$00
	lda     _cursorY
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_accumulator (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_accumulator: near

.segment	"CODE"

;
; unsigned char final_res = accumulator;
;
	ldx     #$00
	lda     _accumulator
	jsr     pusha
;
; if(accumulator & 128){
;
	lda     _accumulator
	ldx     _accumulator+1
	ldx     #$00
	and     #$80
	stx     tmp1
	ora     tmp1
	jeq     L0002
;
; oam_spr(23, 119,'-', 0x2);
;
	ldx     #$00
	lda     #$17
	jsr     pusha
	ldx     #$00
	lda     #$77
	jsr     pusha
	ldx     #$00
	lda     #$2D
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; final_res = 255 - final_res;
;
	ldx     #$00
	lda     #$FF
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tossubax
	ldx     #$00
	ldy     #$00
	sta     (sp),y
;
; final_res++;
;
	ldy     #$00
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; oam_spr(47, 119,((final_res % 10) + 0x30), 0x2);
;
L0002:	ldx     #$00
	lda     #$2F
	jsr     pusha
	ldx     #$00
	lda     #$77
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(39, 119, (((final_res / 10) % 10) + 0x30), 0x2);
;
	ldx     #$00
	lda     #$27
	jsr     pusha
	ldx     #$00
	lda     #$77
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(31, 119, (((final_res / 100) % 10) + 0x30), 0x2);
;
	ldx     #$00
	lda     #$1F
	jsr     pusha
	ldx     #$00
	lda     #$77
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosmodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; }
;
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cpu_status (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cpu_status: near

.segment	"CODE"

;
; p_temp = p;
;
	ldx     #$00
	lda     _p
	sta     _p_temp
;
; for(i = 6; i != 2; --i){
;
	ldx     #$00
	lda     #$06
	sta     _i
L0002:	ldx     #$00
	lda     _i
	cmp     #$02
	jsr     boolne
	jne     L0005
	jmp     L0003
;
; temp = p_temp & 1;
;
L0005:	ldx     #$00
	lda     _p_temp
	ldx     #$00
	and     #$01
	ldx     #$00
	sta     _temp
;
; if(temp){
;
	lda     _temp
	jeq     L0008
;
; if(i > 3) oam_spr((88 - 16 * (i - 3)), 182, flags[7 - i], 0x2);
;
	ldx     #$00
	lda     _i
	cmp     #$04
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0007
	ldx     #$00
	lda     #$58
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     decax3
	jsr     aslax4
	jsr     tossubax
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$B6
	jsr     pusha
	ldx     #$00
	lda     #$07
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     tossubax
	clc
	adc     #<(_flags)
	tay
	txa
	adc     #>(_flags)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; else  oam_spr((88 - 16 * (i + 3)), 190, flags[7 - i], 0x2);
;
	jmp     L0008
L0007:	ldx     #$00
	lda     #$58
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     incax3
	jsr     aslax4
	jsr     tossubax
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$BE
	jsr     pusha
	ldx     #$00
	lda     #$07
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     tossubax
	clc
	adc     #<(_flags)
	tay
	txa
	adc     #>(_flags)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; p_temp >>= 1;
;
L0008:	ldx     #$00
	lda     _p_temp
	lsr     a
	sta     _p_temp
;
; for(i = 6; i != 2; --i){
;
	ldx     #$00
	dec     _i
	lda     _i
	jmp     L0002
;
; if(p_temp & 1) oam_spr(72, 190, flags[7], 0x2);
;
L0003:	ldx     #$00
	lda     _p_temp
	ldx     #$00
	and     #$01
	stx     tmp1
	ora     tmp1
	jeq     L0009
	ldx     #$00
	lda     #$48
	jsr     pusha
	ldx     #$00
	lda     #$BE
	jsr     pusha
	ldx     #$00
	lda     _flags+7
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; if(accumulator == 0) oam_spr(56, 190, flags[6], 0x2);
;
L0009:	lda     _accumulator
	ldx     _accumulator+1
	cpx     #$00
	bne     L000B
	cmp     #$00
L000B:	jsr     booleq
	jeq     L000A
	ldx     #$00
	lda     #$38
	jsr     pusha
	ldx     #$00
	lda     #$BE
	jsr     pusha
	ldx     #$00
	lda     _flags+6
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; if(accumulator & 128) oam_spr(24, 182, flags[0], 0x2);
;
L000A:	lda     _accumulator
	ldx     _accumulator+1
	ldx     #$00
	and     #$80
	stx     tmp1
	ora     tmp1
	jeq     L000C
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$B6
	jsr     pusha
	ldx     #$00
	lda     _flags
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; }
;
L000C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_albert (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_albert: near

.segment	"CODE"

;
; for(i = 0; i != 7; ++i){
;
	ldx     #$00
	lda     #$00
	sta     _i
L0002:	ldx     #$00
	lda     _i
	cmp     #$07
	jsr     boolne
	jne     L0005
	jmp     L0003
;
; for(j = 2; j != 7; ++j){
;
L0005:	ldx     #$00
	lda     #$02
	sta     _j
L0006:	ldx     #$00
	lda     _j
	cmp     #$07
	jsr     boolne
	jne     L0009
	jmp     L0004
;
; oam_spr((200 + (8 * j)), 16 + (i << 3), (0x80 + j + (i << 4)), albert_palette);
;
L0009:	ldx     #$00
	lda     _j
	jsr     shlax3
	ldy     #$C8
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     _i
	jsr     aslax3
	ldy     #$10
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     _j
	ldy     #$80
	jsr     incaxy
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax4
	jsr     tosaddax
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     _albert_palette
	jsr     _oam_spr
;
; for(j = 2; j != 7; ++j){
;
	ldx     #$00
	inc     _j
	lda     _j
	jmp     L0006
;
; for(i = 0; i != 7; ++i){
;
L0004:	ldx     #$00
	inc     _i
	lda     _i
	jmp     L0002
;
; oam_spr(208, 60, 0xD0, albert_palette);
;
L0003:	ldx     #$00
	lda     #$D0
	jsr     pusha
	ldx     #$00
	lda     #$3C
	jsr     pusha
	ldx     #$00
	lda     #$D0
	jsr     pusha
	ldx     #$00
	lda     _albert_palette
	jsr     _oam_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_mario (unsigned char idle)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_mario: near

.segment	"CODE"

;
; void draw_mario(unsigned char idle){
;
	jsr     pusha
;
; if(idle){
;
	ldy     #$00
	lda     (sp),y
	jeq     L0002
;
; oam_spr(144, mario_pos_y, 0x88, 0x1);
;
	ldx     #$00
	lda     #$90
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     pusha
	ldx     #$00
	lda     #$88
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(152, mario_pos_y, 0x89, 0x1);
;
	ldx     #$00
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     pusha
	ldx     #$00
	lda     #$89
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(144, mario_pos_y + 8, 0x98, 0x1);
;
	ldx     #$00
	lda     #$90
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     incax8
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(152, mario_pos_y + 8, 0x99, 0x1);
;
	ldx     #$00
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     incax8
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$99
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; else{
;
	jmp     L0003
;
; oam_spr(144, mario_pos_y, 0x8A, 0x1);
;
L0002:	ldx     #$00
	lda     #$90
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     pusha
	ldx     #$00
	lda     #$8A
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(152, mario_pos_y, 0x8B, 0x1);
;
	ldx     #$00
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     pusha
	ldx     #$00
	lda     #$8B
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(144, mario_pos_y + 8, 0x9A, 0x1);
;
	ldx     #$00
	lda     #$90
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     incax8
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$9A
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(152, mario_pos_y + 8, 0x9B, 0x1);
;
	ldx     #$00
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _mario_pos_y
	jsr     incax8
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$9B
	jsr     pusha
	ldx     #$00
	lda     #$01
	jsr     _oam_spr
;
; }
;
L0003:	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_mario (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_mario: near

.segment	"CODE"

;
; if(can_jump) draw_mario(1);
;
	lda     _can_jump
	jeq     L0002
	ldx     #$00
	lda     #$01
	jsr     _draw_mario
;
; else{
;
	jmp     L0003
;
; draw_mario(0);
;
L0002:	ldx     #$00
	lda     #$00
	jsr     _draw_mario
;
; sfx_play(SFX_JUMP, 0);
;
	ldx     #$00
	lda     #$00
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _sfx_play
;
; ++mario_vel_y;
;
	ldx     #$00
	inc     _mario_vel_y
	lda     _mario_vel_y
;
; mario_pos_y += mario_vel_y;
;
	ldx     #$00
	lda     _mario_vel_y
	ldx     #$00
	ldx     #$00
	clc
	adc     _mario_pos_y
	sta     _mario_pos_y
;
; if(mario_vel_y > 0 && mario_pos_y > 120){
;
L0003:	ldx     #$00
	lda     _mario_vel_y
	cmp     #$00
	jsr     boolne
	jeq     L0005
	ldx     #$00
	lda     _mario_pos_y
	cmp     #$79
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0006
L0005:	ldx     #$00
	lda     #$00
	jeq     L0007
L0006:	ldx     #$00
	lda     #$01
L0007:	jeq     L0004
;
; can_jump = 1;
;
	ldx     #$00
	lda     #$01
	sta     _can_jump
;
; mario_vel_y = 0;
;
	ldx     #$00
	lda     #$00
	sta     _mario_vel_y
;
; mario_pos_y = 120;
;
	ldx     #$00
	lda     #$78
	sta     _mario_pos_y
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cycles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cycles: near

.segment	"CODE"

;
; oam_spr(200, 215, (cycles1 % 10) + 0x30, 0x2);
;
	ldx     #$00
	lda     #$C8
	jsr     pusha
	ldx     #$00
	lda     #$D7
	jsr     pusha
	lda     _cycles1
	ldx     _cycles1+1
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(192, 215, ((cycles1 / 10) % 10) + 0x30, 0x2);
;
	ldx     #$00
	lda     #$C0
	jsr     pusha
	ldx     #$00
	lda     #$D7
	jsr     pusha
	lda     _cycles1
	ldx     _cycles1+1
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(184, 215, ((cycles1 / 100) % 10) + 0x30, 0x2);
;
	ldx     #$00
	lda     #$B8
	jsr     pusha
	ldx     #$00
	lda     #$D7
	jsr     pusha
	lda     _cycles1
	ldx     _cycles1+1
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(200, 223, (cycles2 % 10) + 0x30, 0x2);
;
	ldx     #$00
	lda     #$C8
	jsr     pusha
	ldx     #$00
	lda     #$DF
	jsr     pusha
	lda     _cycles2
	ldx     _cycles2+1
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(192, 223, ((cycles2 / 10) % 10) + 0x30, 0x2);
;
	ldx     #$00
	lda     #$C0
	jsr     pusha
	ldx     #$00
	lda     #$DF
	jsr     pusha
	lda     _cycles2
	ldx     _cycles2+1
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(184, 223, ((cycles2 / 100) % 10) + 0x30, 0x2);
;
	ldx     #$00
	lda     #$B8
	jsr     pusha
	ldx     #$00
	lda     #$DF
	jsr     pusha
	lda     _cycles2
	ldx     _cycles2+1
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     tosudivax
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     tosumodax
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ benchmark (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_benchmark: near

.segment	"CODE"

;
; for(i = 0; i < 100; i++){
;
	ldx     #$00
	lda     #$00
	sta     _i
L0002:	ldx     #$00
	lda     _i
	cmp     #$64
	jsr     boolult
	jne     L0005
	jmp     L0003
;
; temp = rand8() % 3;
;
L0005:	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; if(temp == 0){
;
	ldx     #$00
	lda     _temp
	cmp     #$00
	jsr     booleq
	jeq     L0008
;
; temp = rand8() % 7;
;
	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; switch(temp){
;
	ldx     #$00
	lda     _temp
	jmp     L0007
;
; }   
;
L0007:	cmp     #$00
	jeq     L0009
	cmp     #$01
	jeq     L000B
	cmp     #$02
	jeq     L000D
	cmp     #$03
	jeq     L000F
	cmp     #$04
	jeq     L0011
	cmp     #$05
	jeq     L0013
	cmp     #$06
	jeq     L0015
	cmp     #$07
	jeq     L0017
	jmp     L0008
;
; __asm__("adc #5");
;
L0009:	adc     #5
;
; cycles1 += 2;
;
	lda     #$02
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L000A
	inc     _cycles1+1
L000A:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc 16");
;
L000B:	adc     16
;
; cycles1 += 3;
;
	lda     #$03
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L000C
	inc     _cycles1+1
L000C:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc 16, X");
;
L000D:	adc     16,x
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L000E
	inc     _cycles1+1
L000E:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc 255");
;
L000F:	adc     255
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0010
	inc     _cycles1+1
L0010:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc 255, X");
;
L0011:	adc     255,x
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0012
	inc     _cycles1+1
L0012:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc 255, Y");
;
L0013:	adc     255,y
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0014
	inc     _cycles1+1
L0014:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc (255, X)");
;
L0015:	adc     (255,x)
;
; cycles1 += 6;
;
	lda     #$06
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0016
	inc     _cycles1+1
L0016:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; __asm__("adc (255), Y");
;
L0017:	adc     (255),y
;
; cycles1 += 5;
;
	lda     #$05
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0018
	inc     _cycles1+1
L0018:	ldx     _cycles1+1
;
; break;
;
	jmp     L0008
;
; if(temp == 1){
;
L0008:	ldx     #$00
	lda     _temp
	cmp     #$01
	jsr     booleq
	jeq     L001B
;
; temp = rand8() % 7;
;
	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; switch(temp){
;
	ldx     #$00
	lda     _temp
	jmp     L001A
;
; } 
;
L001A:	cmp     #$00
	jeq     L001C
	cmp     #$01
	jeq     L001E
	cmp     #$02
	jeq     L0020
	cmp     #$03
	jeq     L0022
	cmp     #$04
	jeq     L0024
	cmp     #$05
	jeq     L0026
	cmp     #$06
	jeq     L0028
	cmp     #$07
	jeq     L002A
	jmp     L001B
;
; __asm__("sbc #5");
;
L001C:	sbc     #5
;
; cycles1 += 2;
;
	lda     #$02
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L001D
	inc     _cycles1+1
L001D:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc 16");
;
L001E:	sbc     16
;
; cycles1 += 3;
;
	lda     #$03
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L001F
	inc     _cycles1+1
L001F:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc 16, X");
;
L0020:	sbc     16,x
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0021
	inc     _cycles1+1
L0021:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc 255");
;
L0022:	sbc     255
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0023
	inc     _cycles1+1
L0023:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc 255, X");
;
L0024:	sbc     255,x
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0025
	inc     _cycles1+1
L0025:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc 255, Y");
;
L0026:	sbc     255,y
;
; cycles1 += 4;
;
	lda     #$04
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0027
	inc     _cycles1+1
L0027:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc (255, X)");
;
L0028:	sbc     (255,x)
;
; cycles1 += 6;
;
	lda     #$06
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0029
	inc     _cycles1+1
L0029:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; __asm__("sbc (255), Y");
;
L002A:	sbc     (255),y
;
; cycles1 += 5;
;
	lda     #$05
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L002B
	inc     _cycles1+1
L002B:	ldx     _cycles1+1
;
; break;
;
	jmp     L001B
;
; if(temp == 2){
;
L001B:	ldx     #$00
	lda     _temp
	cmp     #$02
	jsr     booleq
	jeq     L0004
;
; temp = rand8() % 5;
;
	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; switch(temp){
;
	ldx     #$00
	lda     _temp
	jmp     L002D
;
; }
;
L002D:	cmp     #$00
	jeq     L002F
	cmp     #$01
	jeq     L0031
	cmp     #$02
	jeq     L0033
	cmp     #$03
	jeq     L0035
	cmp     #$04
	jeq     L0037
	jmp     L0004
;
; __asm__("asl a");
;
L002F:	asl     a
;
; cycles1 += 2;
;
	lda     #$02
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0030
	inc     _cycles1+1
L0030:	ldx     _cycles1+1
;
; break;
;
	jmp     L0004
;
; __asm__("asl 16");
;
L0031:	asl     16
;
; cycles1 += 5;
;
	lda     #$05
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0032
	inc     _cycles1+1
L0032:	ldx     _cycles1+1
;
; break;
;
	jmp     L0004
;
; __asm__("asl 16, x");
;
L0033:	asl     16,x
;
; cycles1 += 6;
;
	lda     #$06
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0034
	inc     _cycles1+1
L0034:	ldx     _cycles1+1
;
; break;
;
	jmp     L0004
;
; __asm__("asl 255");
;
L0035:	asl     255
;
; cycles1 += 6;
;
	lda     #$06
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0036
	inc     _cycles1+1
L0036:	ldx     _cycles1+1
;
; break;
;
	jmp     L0004
;
; __asm__("asl 255, x");
;
L0037:	asl     255,x
;
; cycles1 += 7;
;
	lda     #$07
	clc
	adc     _cycles1
	sta     _cycles1
	bcc     L0038
	inc     _cycles1+1
L0038:	ldx     _cycles1+1
;
; break;
;
	jmp     L0004
;
; for(i = 0; i < 100; i++){
;
L0004:	ldx     #$00
	lda     _i
	inc     _i
	jmp     L0002
;
; for(i = 0; i < 100; i++){
;
L0003:	ldx     #$00
	lda     #$00
	sta     _i
L0039:	ldx     #$00
	lda     _i
	cmp     #$64
	jsr     boolult
	jne     L003C
	jmp     L003A
;
; temp = rand8() % 3;
;
L003C:	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; if(temp == 0){
;
	ldx     #$00
	lda     _temp
	cmp     #$00
	jsr     booleq
	jeq     L003F
;
; temp = rand8() % 7;
;
	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; switch(temp){
;
	ldx     #$00
	lda     _temp
	jmp     L003E
;
; }   
;
L003E:	cmp     #$00
	jeq     L0040
	cmp     #$01
	jeq     L0042
	cmp     #$02
	jeq     L0044
	cmp     #$03
	jeq     L0046
	cmp     #$04
	jeq     L0048
	cmp     #$05
	jeq     L004A
	cmp     #$06
	jeq     L004C
	cmp     #$07
	jeq     L004E
	jmp     L003F
;
; __asm__("ora #12");
;
L0040:	ora     #12
;
; cycles2 += 2;
;
	lda     #$02
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0041
	inc     _cycles2+1
L0041:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora 16");
;
L0042:	ora     16
;
; cycles2 += 3;
;
	lda     #$03
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0043
	inc     _cycles2+1
L0043:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora 16, X");
;
L0044:	ora     16,x
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0045
	inc     _cycles2+1
L0045:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora 255");
;
L0046:	ora     255
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0047
	inc     _cycles2+1
L0047:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora 255, X");
;
L0048:	ora     255,x
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0049
	inc     _cycles2+1
L0049:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora 255, Y");
;
L004A:	ora     255,y
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L004B
	inc     _cycles2+1
L004B:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora (255, X)");
;
L004C:	ora     (255,x)
;
; cycles2 += 6;
;
	lda     #$06
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L004D
	inc     _cycles2+1
L004D:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; __asm__("ora (255), Y");
;
L004E:	ora     (255),y
;
; cycles2 += 5;
;
	lda     #$05
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L004F
	inc     _cycles2+1
L004F:	ldx     _cycles2+1
;
; break;
;
	jmp     L003F
;
; if(temp == 1){
;
L003F:	ldx     #$00
	lda     _temp
	cmp     #$01
	jsr     booleq
	jeq     L0052
;
; temp = rand8() % 7;
;
	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; switch(temp){
;
	ldx     #$00
	lda     _temp
	jmp     L0051
;
; }   
;
L0051:	cmp     #$00
	jeq     L0053
	cmp     #$01
	jeq     L0055
	cmp     #$02
	jeq     L0057
	cmp     #$03
	jeq     L0059
	cmp     #$04
	jeq     L005B
	cmp     #$05
	jeq     L005D
	cmp     #$06
	jeq     L005F
	cmp     #$07
	jeq     L0061
	jmp     L0052
;
; __asm__("ora #12");
;
L0053:	ora     #12
;
; cycles2 += 2;
;
	lda     #$02
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0054
	inc     _cycles2+1
L0054:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora 16");
;
L0055:	ora     16
;
; cycles2 += 3;
;
	lda     #$03
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0056
	inc     _cycles2+1
L0056:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora 16, X");
;
L0057:	ora     16,x
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0058
	inc     _cycles2+1
L0058:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora 255");
;
L0059:	ora     255
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L005A
	inc     _cycles2+1
L005A:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora 255, X");
;
L005B:	ora     255,x
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L005C
	inc     _cycles2+1
L005C:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora 255, Y");
;
L005D:	ora     255,y
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L005E
	inc     _cycles2+1
L005E:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora (255, X)");
;
L005F:	ora     (255,x)
;
; cycles2 += 6;
;
	lda     #$06
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0060
	inc     _cycles2+1
L0060:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; __asm__("ora (255), Y");
;
L0061:	ora     (255),y
;
; cycles2 += 5;
;
	lda     #$05
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0062
	inc     _cycles2+1
L0062:	ldx     _cycles2+1
;
; break;
;
	jmp     L0052
;
; if(temp == 2){
;
L0052:	ldx     #$00
	lda     _temp
	cmp     #$02
	jsr     booleq
	jeq     L003B
;
; temp = rand8() % 7;
;
	jsr     _rand8
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosumodax
	ldx     #$00
	sta     _temp
;
; switch(temp){
;
	ldx     #$00
	lda     _temp
	jmp     L0064
;
; }   
;
L0064:	cmp     #$00
	jeq     L0066
	cmp     #$01
	jeq     L0068
	cmp     #$02
	jeq     L006A
	cmp     #$03
	jeq     L006C
	cmp     #$04
	jeq     L006E
	cmp     #$05
	jeq     L0070
	cmp     #$06
	jeq     L0072
	cmp     #$07
	jeq     L0074
	jmp     L003B
;
; __asm__("eor #10");
;
L0066:	eor     #10
;
; cycles2 += 2;
;
	lda     #$02
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0067
	inc     _cycles2+1
L0067:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor 16");
;
L0068:	eor     16
;
; cycles2 += 3;
;
	lda     #$03
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0069
	inc     _cycles2+1
L0069:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor 16, X");
;
L006A:	eor     16,x
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L006B
	inc     _cycles2+1
L006B:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor 255");
;
L006C:	eor     255
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L006D
	inc     _cycles2+1
L006D:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor 255, X");
;
L006E:	eor     255,x
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L006F
	inc     _cycles2+1
L006F:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor 255, Y");
;
L0070:	eor     255,y
;
; cycles2 += 4;
;
	lda     #$04
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0071
	inc     _cycles2+1
L0071:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor (255, X)");
;
L0072:	eor     (255,x)
;
; cycles2 += 6;
;
	lda     #$06
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0073
	inc     _cycles2+1
L0073:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; __asm__("eor (255), Y");
;
L0074:	eor     (255),y
;
; cycles2 += 5;
;
	lda     #$05
	clc
	adc     _cycles2
	sta     _cycles2
	bcc     L0075
	inc     _cycles2+1
L0075:	ldx     _cycles2+1
;
; break;
;
	jmp     L003B
;
; for(i = 0; i < 100; i++){
;
L003B:	ldx     #$00
	lda     _i
	inc     _i
	jmp     L0039
;
; p = get_cpu_status();
;
L003A:	jsr     _get_cpu_status
	sta     _p
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handleMenuInput (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleMenuInput: near

.segment	"CODE"

;
; unsigned char result = 0;
;
	lda     #$00
	jsr     pusha
;
; if(PAD_UP & pad1){ 
;
	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$08
	stx     tmp1
	ora     tmp1
	jeq     L0003
;
; cursorY -= mouse_speed;
;
	ldx     #$00
	lda     _mouse_speed
	ldx     #$00
	ldx     #$00
	eor     #$FF
	sec
	adc     _cursorY
	sta     _cursorY
;
; if(cursorY < 1) cursorY = 1;
;
	ldx     #$00
	lda     _cursorY
	cmp     #$00
	jsr     booleq
	jeq     L0003
	ldx     #$00
	lda     #$01
	sta     _cursorY
;
; if(PAD_DOWN & pad1){ 
;
L0003:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$04
	stx     tmp1
	ora     tmp1
	jeq     L0005
;
; cursorY += mouse_speed;
;
	ldx     #$00
	lda     _mouse_speed
	ldx     #$00
	ldx     #$00
	clc
	adc     _cursorY
	sta     _cursorY
;
; if(cursorY > 239)cursorY = 239;
;
	ldx     #$00
	lda     _cursorY
	cmp     #$F0
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0005
	ldx     #$00
	lda     #$EF
	sta     _cursorY
;
; if((pad1 & PAD_LEFT)){
;
L0005:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$02
	stx     tmp1
	ora     tmp1
	jeq     L0006
;
; cursorX -= mouse_speed;
;
	ldx     #$00
	lda     _mouse_speed
	ldx     #$00
	ldx     #$00
	eor     #$FF
	sec
	adc     _cursorX
	sta     _cursorX
;
; if((pad1 & PAD_RIGHT)){
;
L0006:	ldx     #$00
	lda     _pad1
	ldx     #$00
	and     #$01
	stx     tmp1
	ora     tmp1
	jeq     L0007
;
; cursorX += mouse_speed;
;
	ldx     #$00
	lda     _mouse_speed
	ldx     #$00
	ldx     #$00
	clc
	adc     _cursorX
	sta     _cursorX
;
; if((pad1Next & PAD_A)){
;
L0007:	ldx     #$00
	lda     _pad1Next
	ldx     #$00
	and     #$80
	stx     tmp1
	ora     tmp1
	jeq     L0013
;
; result = eval_pos();
;
	jsr     _eval_pos
	ldy     #$00
	sta     (sp),y
;
; if(result < 10) x = result;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     boolult
	jeq     L0009
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     _x
;
; if(result == 0x0B){
;
L0009:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0B
	jsr     booleq
	jeq     L000A
;
; accumulator += x;
;
	ldx     #$00
	lda     _x
	clc
	adc     _accumulator
	sta     _accumulator
	txa
	adc     _accumulator+1
	sta     _accumulator+1
	tax
	lda     _accumulator
;
; p = get_cpu_status();
;
	jsr     _get_cpu_status
	sta     _p
;
; if(result == 0x0D){
;
L000A:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0D
	jsr     booleq
	jeq     L000B
;
; accumulator -= x;
;
	ldx     #$00
	lda     _x
	eor     #$FF
	sec
	adc     _accumulator
	sta     _accumulator
	txa
	eor     #$FF
	adc     _accumulator+1
	sta     _accumulator+1
	tax
	lda     _accumulator
;
; p = get_cpu_status();
;
	jsr     _get_cpu_status
	sta     _p
;
; if(result == 0x0A){
;
L000B:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     booleq
	jeq     L000C
;
; accumulator *= x;
;
	lda     _accumulator
	ldx     _accumulator+1
	jsr     pushax
	ldx     #$00
	lda     _x
	jsr     tosumulax
	sta     _accumulator
	stx     _accumulator+1
;
; p = get_cpu_status();
;
	jsr     _get_cpu_status
	sta     _p
;
; if(result == 0x0F){
;
L000C:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0F
	jsr     booleq
	jeq     L000D
;
; if(x == 0) return;
;
	ldx     #$00
	lda     _x
	cmp     #$00
	jsr     booleq
	jeq     L000E
	jmp     L0014
;
; accumulator /= x;
;
L000E:	lda     _accumulator
	ldx     _accumulator+1
	jsr     pushax
	ldx     #$00
	lda     _x
	jsr     tosudivax
	sta     _accumulator
	stx     _accumulator+1
;
; p = get_cpu_status();
;
	jsr     _get_cpu_status
	sta     _p
;
; if(result == 'C'){
;
L000D:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$43
	jsr     booleq
	jeq     L000F
;
; accumulator = 0;
;
	ldx     #$00
	lda     #$00
	sta     _accumulator
	stx     _accumulator+1
;
; p = get_cpu_status();
;
	jsr     _get_cpu_status
	sta     _p
;
; if(result == 32){
;
L000F:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$20
	jsr     booleq
	jeq     L0011
;
; albert_palette++;
;
	ldx     #$00
	lda     _albert_palette
	inc     _albert_palette
;
; if(albert_palette > 3) albert_palette = 0;
;
	ldx     #$00
	lda     _albert_palette
	cmp     #$04
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0011
	ldx     #$00
	lda     #$00
	sta     _albert_palette
;
; if(result == 33){
;
L0011:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$21
	jsr     booleq
	jeq     L0013
;
; if(can_jump){
;
	lda     _can_jump
	jeq     L0013
;
; mario_vel_y = -10;
;
	ldx     #$00
	lda     #$F6
	sta     _mario_vel_y
;
; can_jump = 0;
;
	ldx     #$00
	lda     #$00
	sta     _can_jump
;
; if(pad1Next & PAD_B){
;
L0013:	ldx     #$00
	lda     _pad1Next
	ldx     #$00
	and     #$40
	stx     tmp1
	ora     tmp1
	jeq     L0014
;
; cycles1 = 0;
;
	ldx     #$00
	lda     #$00
	sta     _cycles1
	stx     _cycles1+1
;
; cycles2 = 0;
;
	ldx     #$00
	lda     #$00
	sta     _cycles2
	stx     _cycles2+1
;
; benchmark();
;
	jsr     _benchmark
;
; }
;
L0014:	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hover (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hover: near

.segment	"CODE"

;
; unsigned char result = eval_pos();
;
	jsr     _eval_pos
	jsr     pusha
;
; unsigned char pal = 0x0;
;
	lda     #$00
	jsr     pusha
;
; if(result == 255){
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$FF
	jsr     booleq
	jeq     L0002
;
; return;
;
	jmp     L0009
;
; if(result < 5){
;
L0002:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$05
	jsr     boolult
	jeq     L0003
;
; oam_spr(24, 159, '?', 0x2);
;
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldx     #$00
	lda     #$3F
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(32 + (result << 4), 135, result + 0x30, pal);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$87
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; if(result < 10){
;
L0003:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     boolult
	jeq     L0004
;
; oam_spr(24, 159, '?', 0x2);
;
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldx     #$00
	lda     #$3F
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(32 + ((result - 5) << 4), 143, result + 0x30, pal);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     decax5
	jsr     aslax4
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$8F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; if(result == 0x0B){
;
L0004:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$0B
	jsr     booleq
	jeq     L0005
;
; oam_spr(64, 159, result + 0x20, pal);
;
	ldx     #$00
	lda     #$40
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(24, 159, result + 0x20, 0x2);
;
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; if(result == 0x0D){
;
L0005:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$0D
	jsr     booleq
	jeq     L0006
;
; oam_spr(80, 159, result + 0x20, pal);
;
	ldx     #$00
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(24, 159, result + 0x20, 0x2);
;
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; if(result == 0x0A){
;
L0006:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     booleq
	jeq     L0007
;
; oam_spr(64, 167, result + 0x20, pal);
;
	ldx     #$00
	lda     #$40
	jsr     pusha
	ldx     #$00
	lda     #$A7
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(24, 159, result + 0x20, 0x2);
;
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; if(result == 0x0F){
;
L0007:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$0F
	jsr     booleq
	jeq     L0008
;
; oam_spr(80, 167, result + 0x20, pal);
;
	ldx     #$00
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     #$A7
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; oam_spr(24, 159, result + 0x20, 0x2);
;
	ldx     #$00
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     #$9F
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	ldy     #$20
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; if(result == 'C'){
;
L0008:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$43
	jsr     booleq
	jeq     L0009
;
; oam_spr(96, 167, result, pal);
;
	ldx     #$00
	lda     #$60
	jsr     pusha
	ldx     #$00
	lda     #$A7
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     _oam_spr
;
; return;
;
	jmp     L0009
;
; }
;
L0009:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_bg(palette); // load the BG palette
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palSprites);
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; put_str(NTADR_A(1, 2), "Museum Emulation Systems");
;
	ldx     #$20
	lda     #$41
	jsr     pushax
	lda     #<(S002F)
	ldx     #>(S002F)
	jsr     _put_str
;
; put_str(NTADR_A(1, 4), "Video mode:");
;
	ldx     #$20
	lda     #$81
	jsr     pushax
	lda     #<(S0030)
	ldx     #>(S0030)
	jsr     _put_str
;
; put_str(NTADR_A(1 ,6), "Author: Beto Perez");
;
	ldx     #$20
	lda     #$C1
	jsr     pushax
	lda     #<(S0031)
	ldx     #>(S0031)
	jsr     _put_str
;
; if(ppu_system()) put_str(NTADR_A(13, 4), "NTSC");
;
	jsr     _ppu_system
	tax
	jeq     L0002
	ldx     #$20
	lda     #$8D
	jsr     pushax
	lda     #<(S0032)
	ldx     #>(S0032)
	jsr     _put_str
;
; else put_str(NTADR_A(13, 4), "PAL");
;
	jmp     L0003
L0002:	ldx     #$20
	lda     #$8D
	jsr     pushax
	lda     #<(S0033)
	ldx     #>(S0033)
	jsr     _put_str
;
; put_str(NTADR_A(1, 15), "A: ");
;
L0003:	ldx     #$21
	lda     #$E1
	jsr     pushax
	lda     #<(S0034)
	ldx     #>(S0034)
	jsr     _put_str
;
; put_str(NTADR_A(1, 17), "X: 0 1 2 3 4");
;
	ldx     #$22
	lda     #$21
	jsr     pushax
	lda     #<(S0035)
	ldx     #>(S0035)
	jsr     _put_str
;
; put_str(NTADR_A(1, 18), "   5 6 7 8 9");
;
	ldx     #$22
	lda     #$41
	jsr     pushax
	lda     #<(S0036)
	ldx     #>(S0036)
	jsr     _put_str
;
; put_str(NTADR_A(1, 20), "A   X: + -");
;
	ldx     #$22
	lda     #$81
	jsr     pushax
	lda     #<(S0037)
	ldx     #>(S0037)
	jsr     _put_str
;
; put_str(NTADR_A(1, 21), "       * / C");
;
	ldx     #$22
	lda     #$A1
	jsr     pushax
	lda     #<(S0038)
	ldx     #>(S0038)
	jsr     _put_str
;
; put_str(NTADR_A(1, 22), "P: ");
;
	ldx     #$22
	lda     #$C1
	jsr     pushax
	lda     #<(S0039)
	ldx     #>(S0039)
	jsr     _put_str
;
; put_str(NTADR_A(11, 26), "Benchmark 100 I: (B)");
;
	ldx     #$23
	lda     #$4B
	jsr     pushax
	lda     #<(S003A)
	ldx     #>(S003A)
	jsr     _put_str
;
; put_str(NTADR_A(11, 27), "ADC/SB/SHF:    Cycles");
;
	ldx     #$23
	lda     #$6B
	jsr     pushax
	lda     #<(S003B)
	ldx     #>(S003B)
	jsr     _put_str
;
; put_str(NTADR_A(11, 28), "OR/AND/XOR:    Cycles");
;
	ldx     #$23
	lda     #$8B
	jsr     pushax
	lda     #<(S003C)
	ldx     #>(S003C)
	jsr     _put_str
;
; put_str(NTADR_A(1, 27), "POS X: ");
;
	ldx     #$23
	lda     #$61
	jsr     pushax
	lda     #<(S003D)
	ldx     #>(S003D)
	jsr     _put_str
;
; put_str(NTADR_A(1, 28), "POS Y: ");
;
	ldx     #$23
	lda     #$81
	jsr     pushax
	lda     #<(S003E)
	ldx     #>(S003E)
	jsr     _put_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (1){
;
	jmp     L0006
;
; ppu_wait_nmi();
;
L0004:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_spr(cursorX, cursorY, 0x7F, 0x0);
;
	ldx     #$00
	lda     _cursorX
	jsr     pusha
	ldx     #$00
	lda     _cursorY
	jsr     pusha
	ldx     #$00
	lda     #$7F
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     _oam_spr
;
; draw_cursor_data();
;
	jsr     _draw_cursor_data
;
; hover();
;
	jsr     _hover
;
; draw_accumulator();
;
	jsr     _draw_accumulator
;
; oam_spr(112, 135, x + 0x30, 0x2);
;
	ldx     #$00
	lda     #$70
	jsr     pusha
	ldx     #$00
	lda     #$87
	jsr     pusha
	ldx     #$00
	lda     _x
	ldy     #$30
	jsr     incaxy
	ldx     #$00
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     _oam_spr
;
; draw_cpu_status();
;
	jsr     _draw_cpu_status
;
; draw_albert();
;
	jsr     _draw_albert
;
; update_mario();
;
	jsr     _update_mario
;
; draw_cycles();
;
	jsr     _draw_cycles
;
; pad1 = pad_poll(0);
;
	ldx     #$00
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1Next = get_pad_new(0);
;
	ldx     #$00
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1Next
;
; handleMenuInput();
;
	jsr     _handleMenuInput
;
; while (1){
;
L0006:	jmp     L0004
;
; }
;
	rts

.endproc

